set nocompatible
filetype off        " required

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'

" Add or remove your plugins here:
Plugin 'Shougo/neocomplete.vim'
Plugin 'Shougo/neosnippet.vim'
Plugin 'Shougo/neosnippet-snippets'
Plugin 'FooSoft/vim-argwrap'
Plugin 'tpope/vim-fugitive'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/syntastic'
Plugin 'nanotech/jellybeans.vim'
Plugin 'powerline/powerline'
Plugin 'fatih/vim-go'
Plugin 'mfukar/robotframework-vim'
Plugin 'tomtom/tcomment_vim'
Plugin 'ekalinin/Dockerfile.vim'
Plugin 'majutsushi/tagbar'
Plugin 'ElmCast/elm-vim'
Plugin 'vim-scripts/groovy.vim'
Plugin 'elubow/cql-vim'
Plugin 'derekwyatt/vim-scala'
Plugin 'kchmck/vim-coffee-script'
Plugin 'tmhedberg/SimpylFold'
Plugin 'sjl/gundo.vim'
Plugin 'sjl/badwolf'
Plugin 'mileszs/ack.vim'
Plugin 'davidhalter/jedi-vim'
Plugin 'jmcantrell/vim-virtualenv'
Plugin 'posva/vim-vue'

" All of your Plugins must be added before the following line
call vundle#end()            " required

filetype plugin indent on    " required
" " To ignore plugin indent changes, instead use:
" "filetype plugin on
" "
" " Brief help
" " :PluginList       - lists configured plugins
" " :PluginInstall    - installs plugins; append `!` to update or just
" :PluginUpdate
" " :PluginSearch foo - searches for foo; append `!` to refresh local cache
" " :PluginClean      - confirms removal of unused plugins; append `!` to
" auto-approve removal
" "
" " see :h vundle for more details or wiki for FAQ
" " Put your non-Plugin stuff after this line

syntax on

set ai
set modeline
set wildignore=*.swp,*.bak,*.pyc,*.class,eggs,develop-eggs,*.egg-info,*~,node_modules,*.mo

set t_Co=256
set background=dark
" let g:solarized_termtrans=1
"let g:solarized_termcolors=256
"let g:solarized_contrast="high"
"let g:solarized_visibility="high"
" colorscheme jellybeans
colorscheme badwolf         " awesome colorscheme

" Use smart indenting
set smarttab expandtab autoindent

" By default use four spaces as indentation
set tabstop=4 shiftwidth=4 softtabstop=4
set number      " Linenumbers
set cursorline  " highlight current line
set wildmenu    " visual autocomplete for command menu
set lazyredraw  " redraw only when we need to.
set showmatch   " highlight matching [{()}]

" Hide pyc and mo files in nerdtree
let NERDTreeIgnore = ['\.pyc$', '\.mo$']

" Go
au Filetype go nnoremap <leader>v :vsp <CR>:exe "GoDef" <CR>
au Filetype go nnoremap <leader>s :sp <CR>:exe "GoDef"<CR>
au Filetype go nnoremap <leader>t :tab split <CR>:exe "GoDef"<CR>
au Filetype go nnoremap <leader>r :GoRun %<CR>

augroup configgroup
    autocmd!
    autocmd VimEnter * highlight clear SignColumn
    " autocmd BufWritePre *.php,*.py,*.js,*.txt,*.hs,*.java,*.md
    "             \:call <SID>StripTrailingWhitespaces()
    autocmd FileType c,cpp,java,php,python autocmd BufWritePre <buffer> %s/\s\+$//e
    autocmd FileType html,xml,xhtml setlocal shiftwidth=2 tabstop=2 softtabstop=2
    autocmd FileType css,js setlocal shiftwidth=2 tabstop=2 softtabstop=2
    autocmd FileType yml,yaml setlocal shiftwidth=2 tabstop=2 softtabstop=2
    autocmd FileType css,jade,stylus,less,scss,handlebars,html,coffee,eruby,javascript setlocal iskeyword+=-
    " Makefiles and gitconfig require tab
    autocmd FileType make,gitconfig setlocal noexpandtab
    autocmd FileType java setlocal noexpandtab
    autocmd FileType java setlocal list
    autocmd FileType java setlocal listchars=tab:+\ ,eol:-
    autocmd FileType java setlocal formatprg=par\ -w80\ -T4
    autocmd FileType php setlocal expandtab
    autocmd FileType php setlocal list
    autocmd FileType php setlocal listchars=tab:+\ ,eol:-
    autocmd FileType php setlocal formatprg=par\ -w80\ -T4
    " Ruby uses 2 spaces as indentation
    autocmd FileType ruby setlocal tabstop=2
    autocmd FileType ruby setlocal shiftwidth=2
    autocmd FileType ruby setlocal softtabstop=2
    autocmd FileType ruby setlocal commentstring=#\ %s
    autocmd FileType python setlocal commentstring=#\ %s
    autocmd BufEnter *.cls setlocal filetype=java
    autocmd BufEnter *.zsh-theme setlocal filetype=zsh
    autocmd BufEnter Makefile setlocal noexpandtab
    autocmd BufEnter *.sh setlocal tabstop=2
    autocmd BufEnter *.sh setlocal shiftwidth=2
    autocmd BufEnter *.sh setlocal softtabstop=2
    autocmd BufEnter *.json setlocal tabstop=2 shiftwidth=2 softtabstop=2
    autocmd FileType python setlocal omnifunc=jedi#completions
        let g:jedi#completions_enabled = 0
        let g:jedi#auto_vim_configuration = 0
        let g:neocomplete#force_omni_input_patterns.python =
        \ '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
    " alternative pattern: '\h\w*\|[^. \t]\.\w*'
    autocmd BufNewFile, BufRead *.py
                \ setlocal tabstop=4
                \ setlocal softtabstop=4
                \ setlocal shiftwidth=4
                \ setlocal textwidth=79
                \ setlocal expandtab
                \ setlocal autoindent
                \ setlocal fileformat=unix
    autocmd BufNewFile,BufRead *.js, *.html, *.css
                \ set tabstop=2
                \ set softtabstop=2
                \ set shiftwidth=2
augroup END

"" Leader mappings
let mapleader = ","
let maplocalleader = ";"

" set custom file types
au BufNewFile,BufRead *.zcml setfiletype xml
au BufNewFile,BufRead *.pt setfiletype xml
au BufNewFile,BufRead *.cpt setfiletype xml
au BufNewFile,BufRead *.coffee setfiletype coffee
au BufNewFile,BufRead *.json setfiletype json
au BufNewFile,BufRead *.ru setfiletype ruby
au BufNewFile,BufRead *.conf setfiletype conf
au BufNewFile,BufRead *.cfg setfiletype conf
au BufNewFile,BufRead *.go setfiletype go
au BufNewFile,BufRead *.robot setfiletype robot
au BufNewFile,BufRead *.yml setfiletype yaml
au BufNewFile,BufRead *.cql setfiletype cql
au BufNewFile,BufRead Jenkinsfile setfiletype groovy

augroup markdown
    au!
    au BufNewFile,BufRead *.md,*.markdown setlocal filetype=ghmarkdown
augroup END

" edit vimrc/zshrc and load vimrc bindings
nnoremap <leader>ev :vsp $MYVIMRC<CR>
nnoremap <leader>ez :vsp ~/.zshrc<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>

" My status lines
" set statusline=%<%f%y\ \ %h%m%r%=%-14.(%l/%L,%c%V%)\ %P
" With Syntastic
" set statusline=%<%f%y\ %#warningmsg#%{SyntasticStatuslineFlag()}%*\ %h%m%r%=%-14.(%l/%L,%c%V%)\ %P

" let g:syntastic_enable_signs=1
let g:syntastic_mode_map = { 'mode': 'active',
                          \ 'active_filetypes': ['ruby', 'python', 'javascript', 'coffee', 'sass', 'css', 'go', 'elm'],
                          \ 'passive_filetypes': ['puppet'] }
let g:syntastic_python_checkers = ['flake8']
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:elm_syntastic_show_warnings = 1
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

nnoremap <leader>e :Errors<CR>

" Show statusline always
set laststatus=2

set title                " change the terminal's title
set noerrorbells         " don't beep
set nowritebackup
set nobackup
set noswapfile

set hidden " hide buffers instead of closing them
set backspace=2 " make backspace work like most other apps

" No Vi stuff anymore
set nocompatible

" Write the old file out when switching between files
set autowrite

"Map escape key to jj -- much faster
imap jj <esc>

" Start window scrolling n lines before hitting the edge
set scrolloff=3

" Make Y behave like other capitals. Yank to end of line.
map Y y$

let g:yankring_history_dir = "$HOME/.vim"

" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

" Apply  substitutions globally on lines. For example, instead of
" :%s/foo/bar/g you just type :%s/foo/bar/. This is almost always what you
" want (when was the last time you wanted to only replace the first occurrence
" of a word on a line?) and if you need the previous behavior you just tack on
" the g again.
set gdefault


" Bubble single lines
" http://vimcasts.org/episodes/bubbling-text/
nmap <C-Up> [e
nmap <C-Down> ]e
" Bubble multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv

" Backups
set backupdir=~/.vim/tmp/backup// " backups
set directory=~/.vim/tmp/swap// " swap files
set backup " enable backup

" * Search & Replace
" make searches case-insensitive, unless they contain upper-case letters:
set ignorecase smartcase

" do not store global and local values in a session
set ssop-=options
" do not store folds
set ssop-=folds

" Clear search hilights
noremap å :noh<cr><esc>

" When editing a file, always jump to the last cursor position
autocmd BufReadPost *
\ if line("'\"") > 0 && line ("'\"") <= line("$") |
\ exe "normal g'\"" |
\ endif

" make vim save and load the folding of the document each time it loads
" also places the cursor in the last place that it was left.
au BufWinLeave * mkview
au BufWinEnter * silent loadview
" TODO: Bug when opening without file


" use :w!! to write to a file using sudo if you forgot to "sudo vim file"
cmap w!! %!sudo tee > /dev/null %

" This turns off Vim’s crazy default regex characters and makes searches use
" normal regexes.
nnoremap / /\v
vnoremap / /\v

"work together to highlight search results (as you type). It’s really quite
"handy, as long as you have the next line as well.
set incsearch
set showmatch
set hlsearch


" Toggle pastemode easily in insert and command mode
set pastetoggle=<F2>

" Always disable paste mode when leaving insert mode
au InsertLeave * set nopaste

" Show trailing whitespace characters
set list
set listchars=tab:>.,trail:.,extends:#,nbsp:.


" Use Q for formatting the current paragraph (or selection).
" Forces 80 character lines.
vmap Q gq
nmap Q gqap


if executable("jslint")
    autocmd BufWritePost *.js :!jslint %
endif

" Format with par if we have it.
if executable("par")
    set formatprg=par\ -w80
endif

" Execute file being edited
map <F5> :! %:p <CR>

" Some aliases
command W w
command Q q
command WQ wq
command Wq wq
command Qa qa
command QA qa
command Wa wa
command WA wa

" :MM to save and make
command MM w|make


" Cooler tab completion for vim commands
" http://stackoverflow.com/questions/526858/how-do-i-make-vim-do-normal-bash-like-tab-completion-for-file-names
set wildmode=longest,list

" Show unsaved changes
command ShowUnsaved w !diff -u % -

command SessionSave mksession .session.vim
command SessionLoad source .session.vim


" Folding
set foldenable
set foldmethod=indent
set foldlevelstart=10  " Open most folds
set foldnestmax=10
" space open/closes folds
nnoremap <space> za
command FoldAll set foldlevel=0
command FoldOne set foldlevel=1


" python stuff
" autocmd BufRead,BufNewFile *.py set smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class
" autocmd BufWritePre *.py normal m`:%s/\s\+$//e ``
" let python_highlight_all = 1

" Hilight long lines
command LongLinesShow let w:m1=matchadd('Search', '\%<81v.\%>78v', -1) | let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
command LongLinesHide call matchdelete(w:m1) | call matchdelete(w:m2)
autocmd BufRead,BufNewFile *.md,*.rst,*.py :LongLinesShow



" Makes Caps Lock work as Esc
command EscToCapsLock !xmodmap -e 'clear Lock' -e 'keycode 0x42 = Escape'


" strip all trailing whitespace in the current file
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>

"" reStructured Text Stuff
" Set heading
nnoremap <leader>rt yypVr

"  to reselect the text that was just pasted so I can perform commands (like
"  indentation) on it
nnoremap <leader>v V`]


"" Window management

" new vertical split
command Vertical vertical sp

" new horizontal split
command Horizontal sp

" Easily move between split windows using <leader>hjkl
nnoremap <leader>h <C-w>h
nnoremap <leader>j <C-w>j
nnoremap <leader>k <C-w>k
nnoremap <leader>l <C-w>l

" Easily resize split windows with Ctrl+hjkl
nnoremap <C-j> <C-w>+
nnoremap <C-k> <C-w>-
nnoremap <C-h> <C-w><
nnoremap <C-l> <C-w>>

" Force redraw to C-l
nnoremap <Leader>r :redraw!<CR>

nnoremap <space> za

" Open file tree
nnoremap <Leader>n :LustyFilesystemExplorer<CR>
" Open bufexplorer
nnoremap <Leader>m :LustyBufferExplorer <CR>
" Opens filesystem explorer at the directory of the current file
nnoremap <Leader>f :LustyFilesystemExplorerFromHere <CR>
" Opens buffer grep
nnoremap <Leader>g :LustyBufferGrep <CR>

" map <Leader>p :echo expand('%:p') <CR>

" Move by screen lines instead of file line. Nice with long lines.
nnoremap j gj
nnoremap k gk

" Copy whole file to OS clipboard
" nmap <Leader>x :%y+<CR>

" Easily change directory to the file being edited.
nmap <Leader>cd :cd %:p:h<CR>

" Delete last linebreak, leading spaces and trailing spaces
nnoremap <Leader>u I" <C-c>hvk$xh " up
nnoremap <Leader>d jI" <C-c>hvk$xh " Down


" diff will be opened automatically after the git commit.
autocmd FileType gitcommit DiffGitCached | wincmd p

" " for pyref
" let g:pyref_index = '~/.vim/bundle/pyref/pyref/index'
" let g:pyref_mapping = 'K'


" spell checking
set spelllang=en_us
" Toggle spelling
nmap <silent> <leader>s :set spell!<CR>


" h, for line start
map <Leader>h 0
" ,l for line end
map <Leader>l $


" Remove crappy keymappings set by plugings
" search bad plugings with :verbose imap <c-n>

" :BufExplorerVerticalSplit<CR>
" au VimEnter * unmap <Leader>bv
" :BufExplorerHorizontalSplit<CR>
" au VimEnter * unmap <Leader>bs
" :BufExplorer<CR>
" au VimEnter * unmap <Leader>be
" BClose
" au VimEnter * unmap <Leader>bd


" LustyExplorer
" au VimEnter * unmap <Leader>lf
" au VimEnter * unmap <Leader>lb
" au VimEnter * unmap <Leader>lj
" au VimEnter * unmap <Leader>lg
" au VimEnter * unmap <Leader>lr


" EasyGrep
" https://github.com/vim-scripts/EasyGrep
" let g:EasyGrepMode=0
" let g:EasyGrepRecursive=1
" let g:EasyGrepIgnoreCase=1
" let g:EasyGrepCommand=1


" Show margin column
if exists('+colorcolumn')
    set colorcolumn=80
endif

"""
" CtrlP settings
let g:ctrlp_match_window = 'bottom,order:ttb'
let g:ctrlp_switch_buffer = 0
let g:ctrlp_working_path_mode = 0
let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'
"
map <Leader>t :CtrlP<CR>
map <Leader>T :CtrlPClearAllCaches<CR>
"
" Exuberant Ctags and Omelette
map <Leader>c :!ctags -R -f ./tags `python -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())"`<CR>
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.egg-info     " MacOSX/Linux
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn|node_modules)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ }

" Ack
" http://betterthangrep.com/
" let g:ackprg="ack-grep -H --nocolor --nogroup --column"
" nnoremap <leader>a :Ack

" Learn mode!
" Disables arrow keys even in insert mode!
"        nnoremap <up> <nop>
"        nnoremap <down> <nop>
"        nnoremap <left> <nop>
"        nnoremap <right> <nop>
"        inoremap <up> <nop>

" Mr.Igor
" nmap <D-i> :!igor %<CR> <bar> :e!<CR>

" TagBar configuration
let g:tagbar_usearrows = 1
nnoremap <leader>ll :TagbarToggle<CR>

" Gundo
map <leader>u :GundoToggle<CR>

" Tasklist
" map <leader>td <Plug>TaskList

" Simple word refactoring shortcut. Hit <Leader>r<new word> on a word to
" refactor it. Navigate to more matches with `n` and `N` and redo refactoring
" by hitting the dot key.
" noremap <leader>r mp*Nciw

" Easier curly braces insertion
imap § {
imap ½ }

" If we're running Vim 7.3 or newer, enable persistent undo and tell vim were
" " to store the undo files.
if version >= 703
    set undofile
    set undodir=~/.vim/tmp/undos
endif

" Block navigation
map <leader>k [%
map <leader>j ]%

" UltiSnip
""""""""""

set runtimepath+=~/.vim/bundle/UltiSnips

" let g:UltiSnipsExpandTrigger="<tab>"
" let g:UltiSnipsJumpForwardTrigger="<c-b>"
" let g:UltiSnipsJumpBackwardTrigger="<c-z>"
" let g:UltiSnipsSnippetDirectories=["UltiSnips", "snippets"]

" NERDTree
""""""""""

silent! nmap <F2> :NERDTreeToggle<CR>
silent! map <F3> :NERDTreeFind<CR>

" Jedi
" let g:jedi#use_tabs_not_buffers = 0

" Powerline
" python from powerline.vim import setup as powerline_setup
" python powerline_setup()
" python del powerline_setup

" neocomplete like
" set completeopt+=noinsert
" set completeopt+=noselect

" Set before than deoplete
" deoplete#mappings#_set_completeopt() in
" https://github.com/Shougo/deoplete.nvim/blob/master/autoload/deoplete/mappings.vim
" https://github.com/Shougo/deoplete.nvim/blob/master/rplugin/python3/deoplete/deoplete.py

" Path to python interpreter for neovim
let g:python3_host_prog  = '/usr/local/bin/python3'
" Skip the check of neovim module
let g:python3_host_skip_check = 1

let g:deoplete#enable_at_startup = 1

let g:ackprg = 'ag --vimgrep --smart-case'
cnoreabbrev ag Ack
cnoreabbrev aG Ack
cnoreabbrev Ag Ack
cnoreabbrev AG Ack
" open ag.vim
nnoremap <leader>a :Ag


" Elm
nnoremap <leader>el :ElmEvalLine<CR>
vnoremap <leader>es :<C-u>ElmEvalSelection<CR>
nnoremap <leader>em :ElmMakeCurrentFile<CR><Paste>


autocmd BufWritePost *.elm ElmMakeCurrentFile
autocmd BufWritePost *.elm ElmMakeFile("Main.elm")

let g:SimpylFold_docstring_preview=1

set rtp+=~/.fzf

" Neocomplete
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
nnoremap <silent> <leader>a :ArgWrap<CR>
